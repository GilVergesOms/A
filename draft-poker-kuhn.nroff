.pl 10.0i
.po 0
.ll 7.2i
.lt 7.2i
.nr LL 7.2i
.nr LT 7.2i
.ds LF Grup A
.ds RF FORMFEED[Page %]
.ds LH INTERNET DRAFT
.ds RH 22/02/2018
.ds CH POKER KUHN
.ds CF Expires 28/02/2018
.hy 0
.nh
.ad l
.in 0

.nf
.tl 'INTERNET-DRAFT''Grup A - Software Distribuit'
.tl 'Intended Status: Proposed Standard''(University of Barcelona)'
.tl 'Expires:' '28/02/2018'
.fi

.\" Note. The ".tl" directive is used to generate the leading header 
.\" in Internet drafts. The information specified after ".tl" provides
.\" left, center and right components of a line separated by the ' character
.\" in the following manner:
.\" 
.\"  .tl '<left component>'<center component>'<right component>'
.\"
.\" Only the left and right components are used in Internet-draft headers
.\" This and other comments in this template can safely be deleted.

.ce 2
A protocol for the Poker Kuhn game
.fi
.in 3

.ti 0
Abstract

This protocol is used for the client/server version of the card game 'Kuhn poker'.

.ti 0
Status of this Memo

This Internet-Draft is submitted to IETF in full conformance with the provisions of BCP\078 and BCP\079.

Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups.  Note that other groups may also distribute working documents as \%Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time.  It is inappropriate to use Internet-Drafts as reference material or to cite them other than as "work in progress."

The list of current Internet-Drafts can be accessed at \%http://www.ietf.org/1id-abstracts.html

The list of Internet-Draft Shadow Directories can be accessed at http://www.ietf.org/shadow.html


.ti 0
Copyright and License Notice\" Boilerplate from December 2009

.\" NOTE: Insert current <year> in the following paragraph
Copyright (c) 2018 IETF Trust and the persons identified as the document authors. All rights reserved.

This document is subject to BCP\078 and the IETF Trust's Legal Provisions Relating to IETF Documents \%(http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section\04.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.



.\" \# TD4  -- Set TOC depth by altering this value (TD5 = depth 5)
.\" \# TOC  -- Beginning of auto updated Table of Contents
.in 0
Table of Contents

.nf
   1. Introduction  . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2. The Poker procedure for player and opponent . . . . . . . . . .  3
   3. The Kuhn poker specification  . . . . . . . . . . . . . . . . .  4
     3.1. Client Commands Semantics:  . . . . . . . . . . . . . . . .  4
     3.2. Server Commands Semantics:  . . . . . . . . . . . . . . . .  5
   4. Command Syntax  . . . . . . . . . . . . . . . . . . . . . . . .  6
   5. Examples  . . . . . . . . . . . . . . . . . . . . . . . . . . .  8
   6. Rules of the game . . . . . . . . . . . . . . . . . . . . . . .  9
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 10
   Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
.fi
.in 3

.\" \# ETC -- End of auto updated Table of Contents

.bp
.ti 0
1. Introduction

Kuhn poker is an extremely simplified form of poker developed by Harold W. Kuhn.


.ti 0
2. The Poker procedure for player and opponent

The Kuhn poker design is based on the following procedure:

.in 6
The game is only for two players.
.br
One player is the client application and the other is the server application.
.br
The player who wants to play connects with the game server using the communication port number 1212.
.br
The client has to specify which player wants to be, the first or the second.
.br

The following graph will define each state and possible actions for each player,
it goes from top to down starting from the top:

.nf
                              +-----+
                              | P 1 |
                              +-----+
                 BET             |            CHECK
                  +--------------+--------------+
                  |                             |
               +-----+                       +-----+
               | P 2 |                       | P 2 |
               +-----+                       +-----+
  CALL            | FOLD       CHECK            |  BET
   +--------------+              +------------------+
   |              |              |                  |
SHOWDOWN       P1 wins        SHOWDOWN           +-----+
--------       -------        --------           | P 1 |
                                                 +-----+
                                    FOLD            |  CALL
                                     +--------------+---+
                                     |                  |
                                  P2 wins            SHOWDOWN
                                  -------            --------
.fi


Each state is a decision state or a terminal state. Decision states are defined by a box with the player who has to make the decision inside, they can lead to one of the two states below depending on the action chosen. Terminal states are non-decision states where the game ends.
.bp
.in 3
.ti 0
3. The Kuhn poker specification

This section presents the different commands used in the Poker protocol.

.ti 0
3.1. Client Commands Semantics:

.in 3
First, we start defining the commands used by the client:

The commands are the following:

.in 9
.ti 6
START (STRT):

With this command the client can start a game with the server, it has
to be specified in the arguments if the client wants to play as the first
or the second player. 
.br

This command starts the TCP session.

.ti 6
ACTION (ACTN):

This command is used to notify to the server which action does the client
choose at a given state of the game. After every action the client has to
wait for a response unless the game has ended. In a showdown the game ends
when the client receives the card from the server.
.br

There are four possible actions for the client: 
.br
CHECK (CHK), BET (BET), CALL (CAL) and FOLD (FLD).

.ti 6
DISCONNECT (DISC):

This command is used to notify the server that the client wants to end the
TCP session.
.br
.ti 12
(Discussion about this topic is needed).

.bp
.in 3
.ti 0
3.2. Server Commands Semantics:

Now, we define the commands used by the server:

.in 9
.ti 6
CARD (CARD):

This command is used to notify the client which card does it has in this game.
It is also used to show the card held by the server in a showdown.
.br

The argument can only contain one of the following three cards:
.br
Jack (C_K), Queen (C_Q), King (C_K).
.br

Note that in a showdown the server will only send the CARD command (not an ACTION command followed by the CARD command).

.ti 6
ACTION (ACTN):

This command is used to notify the client which action the server decides to take
in a given state of the game. After every action the server has to wait for a
response unless the game has ended.
.br

There are three possible actions for the server: 
.br
CHECK (CHK), BET (BRT) and FOLD (FLD).
.br

Note that there is not CALL because is used the CARD command instead (it leads to a showdown).

.ti 6
DISCONNECT (DISC):

This command is used to notify the client that the server is about to end the TCP
session.
.br

.ti 12
(Discussion about this topic needed).

.ti 6
FAIL (FAIL):

This command is used to notify about any error to the client. 
.br
There are only two possible arguments for this command: 
.br
Wrong Action (W_A) and No Coins (N_C).
.br

The first is used to notify that an action received can't be performed at the given state of the game and the second is used to notify that the client is trying to perform an action which requires more coins than it has.


.bp
.in 3
.ti 0
4. Command Syntax

The commands consist of a command code, sometimes followed by a space and one argument field. 
.br
Command codes are four alphabetic characters. 
.br
Upper and lower case alphabetic characters are to be treated identically. 

Thus, any of the following may represent the STRT command:

.ti 6
STRT Strt strt StRt StRT

This also applies to any symbols representing parameter values.
.br
Argument field is composed for only one argument separated from the command by a space.
.br
Each argument is composed by three ASCII characters.


The following are the Poker Kuhn commands (spaces in the text are only for the visualization and are not included in the command):

.in 6
STRT <SP> <player>

CARD <SP> <card>

ACTN <SP> <action>

FAIL <SP> <errcode>

DISC

.in 3
The syntax of the above argument fields is given below (using BNF notation where applicable).
.br
The DISCONNECT command does not need any argument.

.in 6
<player>  ::= "P_1" | "P_2"

<card>    ::= "C_J" | "C_Q" | "C_K"

<action>  ::= "CHK" | "BET" | "CAL" | "FLD"

<errcode> ::= "W_A" | "N_C"

<SP>      ::= The space character (ASCII code 32)

.bp
.in 3
As explained above each argument is composed by two ASCII characters, for example:

"P_1" would be the ASCII code 80 ("P"), 
followed by the ASCII code 95 ("_") followed by the ASCII code 49 ("1").


The following are examples of syntactically correct commands:

.in 6
STRT "P_1"

STRT "P_2"

CARD "C_K"

ACTN "CHK"

FAIL "N_C"

DISC

.bp
.in 3
.ti 0
5. Examples

Here are some examples of possible games:

Example 1 (Client plays as the first player and the game ends in a showdown):

.in 9
.ti 6
Client (Start as the player 1):
.br
STRT "P_1"

.ti 6
Server (Gives card (Queen)):
.br
CARD "C_Q"

.ti 6
Client (Action BET):
.br
ACTN "BET"

.in 6
Server (Shows card (Instead of doing action call and then showing card)):
.br
.ti 9
CARD "C_K"

Client (The game has ended and the client disconnects (it can start a new game too)):
.br
.ti 9
DISC


.in 3
Example 2 (Client plays as the second player and the game ends in a fold by the player 1):

.in 9
.ti 6
Client (Starts as the player 2):
.br
STRT "P_2"

.ti 6
Server (Gives card (Jack)):
.br
CARD "C_J"

.ti 6
Server (Action CHECK):
.br
ACTN "CHK"

.ti 6
Client (Action BET):
.br
ACTN "BET"

.ti 6
Server (Action FOLD):
.br
ACTN "FLD"

.in 6
Client (The game has ended and the client disconnects (it can start a new game too)):
.br
.ti 9
DISC

.bp
.in 3
.ti 0
6. Rules of the game

There are only three cards: King, Queen, Jack.

At first both players put an ante (one coin) in the pot and get one card (they can't see the others).

The first player has to decide if it bets (one coin) or it checks (pass).
.in 6
If the first player checks the second player can check or bet.
.br
If the second player checks the game ends in a showdown (explained below).

.in 3
Aside from which player bets the next player can call or fold.
.in 6
If that player calls it has to put another coin and the game ends in a showdown.
.br
If that player folds the game ends and the other player wins.

.in 3
If the game ends in a showdonwn both players show their cards and the player with the higher card wins.


The order for the cards is: Jack < Queen < King.


The player who wins gets all the coins in the pot.


.bp
.in 3
.ti 0
Authors' Addresses

.sp
.nf
Marti Huerta

Email: noemdeixa@hotmail.com

Grup A:

GitHub: https://github.com/UB-GEI-SD/A
.sp
.fi


.bp
.in 3
.ti 0
Discussion

There has to be discussed the topic of the DISCONNECT command (if it is necessary) and also any protocol to check if the server/client works in Big Endian or Little Endian.
